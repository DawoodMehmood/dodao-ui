fragment GuideSettings on GuideSettings {
  askForLoginToSubmit
  captureRating
  showIncorrectAfterEachStep
  showIncorrectOnCompletion
}

fragment AuthSettings on AuthSettings {
  enableLogin
  loginOptions
}

fragment SocialSettings on SocialSettings {
  linkedSharePdfBackgroundImage
}

fragment SpaceWithIntegrations on Space {
  id
  creator
  features
  name
  type
  skin
  avatar
  domains
  botDomains
  inviteLinks {
    discordInviteLink
    showAnimatedButtonForDiscord
    telegramInviteLink
    showAnimatedButtonForTelegram
  }
  admins
  adminUsernames
  adminUsernamesV1 {
    username
    nameOfTheUser
  }
  spaceIntegrations {
    academyRepository
    discordGuildId
    gitGuideRepositories {
      authenticationToken
      gitRepoType
      repoUrl
    }
    gnosisSafeWallets {
      id
      chainId
      order
      tokenContractAddress
      walletAddress
      walletName
    }
    projectGalaxyTokenLastFour

    loadersInfo {
      discourseUrl
      discordServerId
    }
  }
  authSettings {
    loginOptions
    enableLogin
  }

  socialSettings {
    linkedSharePdfBackgroundImage
  }
  guideSettings {
    askForLoginToSubmit
    captureRating
    showCategoriesInSidebar
    showIncorrectAfterEachStep
    showIncorrectOnCompletion
  }

  byteSettings {
    askForLoginToSubmit
    captureRating
    showCategoriesInSidebar
  }
  themeColors {
    primaryColor
    bgColor
    textColor
    linkColor
    headingColor
    borderColor
    blockBg
  }
}

fragment SpaceSummary on Space {
  id
  admins
  adminUsernames
  avatar
  creator
  name
  skin
  domains
}

fragment VercelDomainRecord on VercelDomain {
  apexName
  createdAt
  gitBranch
  name
  projectId
  redirect
  updatedAt
  verified
  verification {
    type
    domain
    reason
    value
  }
}

fragment Route53Record on Route53Record {
  type
  name
  records
  ttl
}

query Spaces {
  spaces {
    ...SpaceSummary
  }
}

query ExtendedSpace($spaceId: String!) {
  space(id: $spaceId) {
    ...SpaceWithIntegrations
  }
}

query GetSpaceFromCreator($creatorUsername: String!) {
  getSpaceFromCreator(creatorUsername: $creatorUsername) {
    ...SpaceWithIntegrations
  }
}

query ExtendedSpaceByDomain($domain: String!) {
  space(domain: $domain) {
    ...SpaceWithIntegrations
  }
}

query SpaceDiscordGuild($spaceId: String!) {
  payload: spaceDiscordGuild(spaceId: $spaceId)
}

query Route53Record($spaceId: String!) {
  payload: route53Record(spaceId: $spaceId) {
    ...Route53Record
  }
}

query VercelDomainRecord($spaceId: String!) {
  vercelDomainRecord(spaceId: $spaceId) {
    ...VercelDomainRecord
  }
}

mutation UpsertSpaceFeatures($spaceId: String!, $features: [String!]!) {
  payload: upsertSpaceFeatures(spaceId: $spaceId, features: $features) {
    ...SpaceWithIntegrations
  }
}

mutation DropPineconeNamespace($spaceId: String!) {
  dropPineconeNamespace(spaceId: $spaceId)
}

mutation UpsertSpaceInviteLinks($spaceId: String!, $spaceInviteArgs: SpaceInviteArgs!) {
  payload: upsertSpaceInviteLinks(spaceId: $spaceId, spaceInviteArgs: $spaceInviteArgs) {
    id
  }
}

mutation UpsertProjectGalaxyAccessToken($spaceId: String!, $accessToken: String!) {
  payload: upsertProjectGalaxyAccessToken(spaceId: $spaceId, accessToken: $accessToken) {
    id
  }
}

mutation CreateSignedUrl($spaceId: String!, $input: CreateSignedUrlInput!) {
  payload: createSignedUrl(spaceId: $spaceId, input: $input)
}

mutation AddDiscordCredentials($spaceId: String!, $code: String!, $redirectUri: String!) {
  payload: addDiscordCredentials(spaceId: $spaceId, code: $code, redirectUri: $redirectUri) {
    id
  }
}

mutation UpsertSpaceAcademyRepository($spaceId: String!, $academyRepository: String!) {
  upsertSpaceAcademyRepository(spaceId: $spaceId, academyRepository: $academyRepository) {
    id
  }
}

mutation UpdateSpace($spaceInput: UpsertSpaceInput!) {
  updateSpace(spaceInput: $spaceInput) {
    ...SpaceWithIntegrations
  }
}

mutation CreateSpace($spaceInput: UpsertSpaceInput!) {
  createSpace(spaceInput: $spaceInput) {
    ...SpaceWithIntegrations
  }
}

mutation CreateNewTidbitSpace($spaceInput: UpsertSpaceInput!) {
  createNewTidbitSpace(spaceInput: $spaceInput) {
    ...SpaceWithIntegrations
  }
}

mutation UpsertDomainRecords($spaceId: String!) {
  upsertDomainRecords(spaceId: $spaceId) {
    route53Record {
      ...Route53Record
    }
    vercelDomainRecord {
      ...VercelDomainRecord
    }
  }
}

mutation ReloadAcademyRepo($spaceId: String!) {
  reloadAcademyRepository(spaceId: $spaceId)
}

mutation UpdateSpaceGuideSettings($spaceId: String!, $input: GuideSettingsInput!) {
  payload: updateGuideSettings(spaceId: $spaceId, input: $input) {
    ...SpaceWithIntegrations
  }
}

mutation UpdateSpaceAuthSettings($spaceId: String!, $input: AuthSettingsInput!) {
  payload: updateAuthSettings(spaceId: $spaceId, input: $input) {
    ...SpaceWithIntegrations
  }
}

mutation UpdateSpaceSocialSettings($spaceId: String!, $input: SocialSettingsInput!) {
  payload: updateSocialSettings(spaceId: $spaceId, input: $input) {
    ...SpaceWithIntegrations
  }
}

mutation UpdateSpaceByteSettings($spaceId: String!, $input: ByteSettingsInput!) {
  payload: updateByteSettings(spaceId: $spaceId, input: $input) {
    ...SpaceWithIntegrations
  }
}

mutation SendEmail($input: SendEmailInput!) {
  payload: sendEmail(input: $input)
}

mutation UpsertSpaceLoaderInfo($spaceId: String!, $input: SpaceLoadersInfoInput!) {
  payload: upsertSpaceLoaderInfo(spaceId: $spaceId, input: $input) {
    ...SpaceWithIntegrations
  }
}

mutation UpdateThemeColors($spaceId: ID!, $themeColors: ThemeColorsInput!) {
  payload: updateThemeColors(spaceId: $spaceId, themeColors: $themeColors) {
    ...SpaceWithIntegrations
  }
}

mutation UpdateSpaceCreator($spaceId: String!, $id: String!) {
  updateSpaceCreator(spaceId: $spaceId, creator: $id) {
    ...SpaceWithIntegrations
  }
}

mutation UpsertRoute53Record($spaceId: String!) {
  upsertRoute53Record(spaceId: $spaceId) {
    ttl
    records
    name
    type
  }
}

mutation UpsertVercelDomainRecord($spaceId: String!) {
  upsertVercelDomainRecord(spaceId: $spaceId) {
    apexName
    createdAt
    gitBranch
    name
    projectId
    redirect
    updatedAt
    verified
  }
}
