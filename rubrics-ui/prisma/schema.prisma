// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth default user tables
// Most of these tables and fields are not needed for this example
//  but this is what NextAuth adapters expect to be in the database
//  so we are keeping it for future compatibility and extensibility
// See comments on what is added by us.

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  publicAddress String?   @map("public_address")
  phone_number  String?   @map("phone_number")
  password      String?

  spaceId      String @map("space_id")
  username     String @map("username")
  authProvider String @map("auth_provider")

  accounts         Account[]
  sessions         Session[]
  cryptoLoginNonce CryptoLoginNonce?

  @@unique([publicAddress, spaceId])
  @@unique([username, spaceId])
  @@unique([email, spaceId])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Added for crypto authentication

model CryptoLoginNonce {
  userId  String   @unique @map("user_id")
  nonce   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("crypto_login_nonce")
}

model Space {
  id               String   @id @db.VarChar(64)
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")
  creator          String   @db.VarChar(64)
  name             String   @db.VarChar(255)
  updatedAt        DateTime @updatedAt @map("updated_at")
  avatar           String?  @db.VarChar(255)
  /// [UsernameAndName]
  adminUsernamesV1 Json[]   @map("admin_usernames_v1") @db.JsonB
  domains          String[] @default([])
  /// [AuthSettings]
  authSettings     Json     @default("{}") @map("auth_settings") @db.Json
  features         String[]

  themeColors Json? @map("theme_colors") @db.Json

  @@map("spaces")
}

model Program {
  id      Int      @id @default(autoincrement())
  name    String
  details String
  rubrics Rubric[]
}

model Rubric {
  id          Int              @id @default(autoincrement())
  name        String
  summary     String?
  description String?
  programId   Int
  program     Program          @relation(fields: [programId], references: [id])
  levels      RubricLevel[]
  criteria    RubricCriteria[]
  RubricCell  RubricCell[]

  @@unique([programId, name])
}

model RubricLevel {
  id          Int          @id @default(autoincrement())
  columnName  String
  description String?
  score       Int?
  rubricId    Int
  rubric      Rubric       @relation(fields: [rubricId], references: [id])
  RubricCell  RubricCell[]

  @@unique([rubricId, columnName])
}

model RubricCriteria {
  id         Int          @id @default(autoincrement())
  title      String
  rubricId   Int
  rubric     Rubric       @relation(fields: [rubricId], references: [id])
  RubricCell RubricCell[]

  @@unique([rubricId, title])
}

model RubricCell {
  id          Int             @id @default(autoincrement())
  description String
  levelId     Int?
  criteriaId  Int?
  rubricId    Int
  rubric      Rubric          @relation(fields: [rubricId], references: [id])
  level       RubricLevel?    @relation(fields: [levelId], references: [id])
  criteria    RubricCriteria? @relation(fields: [criteriaId], references: [id])

  @@unique([rubricId, levelId, criteriaId])
}
