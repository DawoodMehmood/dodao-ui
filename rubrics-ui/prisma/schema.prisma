// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth default user tables
// Most of these tables and fields are not needed for this example
//  but this is what NextAuth adapters expect to be in the database
//  so we are keeping it for future compatibility and extensibility
// See comments on what is added by us.

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user RubricUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique @map("session_token")
  userId       String     @map("user_id")
  expires      DateTime
  user         RubricUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RubricUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  publicAddress String?   @map("public_address")
  phoneNumber   String?   @map("phone_number")
  password      String?

  spaceId      String @map("space_id")
  username     String @map("username")
  authProvider String @map("auth_provider")

  accounts         Account[]
  sessions         Session[]
  cryptoLoginNonce CryptoLoginNonce?
  rubricRatings    RatingCellSelection[]
  RubricRating     RubricRating[]

  @@unique([publicAddress, spaceId])
  @@unique([username, spaceId])
  @@unique([email, spaceId])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Added for crypto authentication

model CryptoLoginNonce {
  userId  String     @unique @map("user_id")
  nonce   String
  expires DateTime
  user    RubricUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("crypto_login_nonce")
}

model RubricSpace {
  id               String    @id @db.VarChar(64)
  verified         Boolean   @default(false)
  createdAt        DateTime  @default(now()) @map("created_at")
  creator          String    @db.VarChar(64)
  name             String    @db.VarChar(255)
  updatedAt        DateTime  @updatedAt @map("updated_at")
  avatar           String?   @db.VarChar(255)
  /// [UsernameAndName]
  adminUsernamesV1 Json[]    @map("admin_usernames_v1") @db.JsonB
  domains          String[]  @default([])
  /// [AuthSettings]
  authSettings     Json      @default("{}") @map("auth_settings") @db.Json
  features         String[]
  /// [ThemeColors]
  themeColors      Json?     @map("theme_colors") @db.Json
  Program          Program[]
  Rubric           Rubric[]

  @@map("spaces")
}

model Program {
  id      String                 @id @default(uuid()) @db.VarChar(64)
  name    String
  details String?
  summary String
  rubrics ProgramRubricMapping[]
  spaceId String                 @map("space_id") @db.VarChar(255)
  Space   RubricSpace            @relation(fields: [spaceId], references: [id])

  @@map("programs")
}

model Rubric {
  id          String                 @id @default(uuid()) @db.VarChar(64)
  name        String                 @db.VarChar(64)
  summary     String
  description String?
  levels      RubricLevel[]
  criterias   RubricCriteria[]
  cells       RubricCell[]
  programs    ProgramRubricMapping[]
  ratings     RubricRating[]
  spaceId     String                 @map("space_id") @db.VarChar(255)
  Space       RubricSpace            @relation(fields: [spaceId], references: [id])

  @@map("rubrics")
}

model ProgramRubricMapping {
  id        String  @id @default(uuid()) @db.VarChar(64)
  programId String  @map("program_id") @db.VarChar(64)
  rubricId  String  @map("rubric_id") @db.VarChar(64)
  program   Program @relation(fields: [programId], references: [id])
  rubric    Rubric  @relation(fields: [rubricId], references: [id])

  @@unique([programId, rubricId])
  @@map("program_rubric_mappings")
}

model RubricLevel {
  id          String       @id @default(uuid()) @db.VarChar(64)
  columnName  String       @map("column_name") @db.VarChar(64)
  description String?      @db.VarChar(64)
  score       Int
  rubricId    String       @map("rubric_id") @db.VarChar(64)
  rubric      Rubric       @relation(fields: [rubricId], references: [id])
  cells       RubricCell[]
  isArchived  Boolean      @default(false) @map("is_archived")

  @@map("rubric_levels")
}

model RubricCriteria {
  id         String       @id @default(uuid())
  title      String       @db.VarChar(64)
  rubricId   String       @map("rubric_id") @db.VarChar(64)
  rubric     Rubric       @relation(fields: [rubricId], references: [id])
  cells      RubricCell[]
  isArchived Boolean      @default(false) @map("is_archived")

  @@unique([rubricId, title])
  @@map("rubric_criterias")
}

model RubricCell {
  id          String                @id @default(uuid()) @db.VarChar(64)
  description String                @db.VarChar(64)
  levelId     String                @map("level_id") @db.VarChar(64)
  criteriaId  String                @map("criteria_id") @db.VarChar(64)
  rubricId    String                @map("rubric_id") @db.VarChar(64)
  rubric      Rubric                @relation(fields: [rubricId], references: [id])
  level       RubricLevel           @relation(fields: [levelId], references: [id])
  criteria    RubricCriteria        @relation(fields: [criteriaId], references: [id])
  ratings     RatingCellSelection[]
  isArchived  Boolean               @default(false) @map("is_archived")

  @@unique([rubricId, levelId, criteriaId])
  @@map("rubric_cells")
}

model RubricRating {
  id         String                @id @default(uuid()) @db.VarChar(64)
  rubricId   String                @map("rubric_id") @db.VarChar(64)
  rubric     Rubric                @relation(fields: [rubricId], references: [id])
  selections RatingCellSelection[]
  user       RubricUser            @relation(fields: [userId], references: [id])
  userId     String                @map("user_id")
  status     String                @default("InProgress")

  @@unique([rubricId, userId])
  @@map("rubric_ratings")
}

model RatingCellSelection {
  id             String       @id @default(uuid()) @db.VarChar(64)
  rubricCellId   String       @map("rubric_cell_id") @db.VarChar(64)
  rubricRatingId String       @map("rubric_rating_id") @db.VarChar(64)
  rubricCell     RubricCell   @relation(fields: [rubricCellId], references: [id])
  rubricRating   RubricRating @relation(fields: [rubricRatingId], references: [id])
  comment        String
  user           RubricUser   @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")

  @@unique([rubricCellId, rubricRatingId])
  @@map("rating_cell_selections")
}
